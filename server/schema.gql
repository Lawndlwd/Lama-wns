# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type ClassRoom {
  _id: ID!
  course: [Course!]!
  createdAt: DateTime!
  desc: String!
  image: String!
  inviteSecret: String!
  inviteSecretTmp: Float!
  members: [User!]!
  name: String!
  owner: User!
  rate: Float!
  state: String!
  tags: [String!]!
  updatedAt: DateTime!
}

input ClassRoomInput {
  course: [String!]
  desc: String!
  image: String!
  members: [String!]
  name: String!
  state: String = "PUBLIC"
  tags: [String!]
}

input ClassRoomUpdateInput {
  _id: ID!
  course: [String!]
  desc: String
  image: String
  members: [String!]
  name: String
  rate: Float
  state: String = "PUBLIC"
  tags: [String!]
}

type Comment {
  _id: ID!
  classRoom: String!
  commenter: User!
  content: String!
  course: String!
  createdAt: DateTime!
  parent: String
  step: String!
  updatedAt: DateTime!
}

input CommentInput {
  classRoom: String!
  content: String!
  course: String!
  parent: String
  step: String!
}

input CommentUpdateInput {
  _id: ID!
  content: String!
}

type Course {
  _id: ID!
  classRoom: ClassRoom!
  createdAt: DateTime!
  localRate: Float!
  rating: Float!
  steps: [Steps!]!
  title: String!
  updatedAt: DateTime!
}

input CourseInput {
  classRoom: String!
  steps: [StepsInput!]!
  title: String!
}

input CourseUpdateInput {
  _id: ID!
  steps: [StepsInput!]!
  title: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ILAMA_Response {
  message: String!
  ok: Boolean!
  user: User!
}

type IdeleteResponse {
  deletedCount: Float!
  n: Float!
  ok: Float!
}

type Mutation {
  Login(data: UserLoginInput!): RigesterResponse!
  Register(data: UserInput!): RigesterResponse!
  UpdateUser(email: String!, name: String!): ILAMA_Response!
  createClass(data: ClassRoomInput!): ClassRoom!
  createComment(data: CommentInput!): Comment!
  createCourse(data: CourseInput!): Course!
  deleteClass(id: String!): IdeleteResponse!
  deleteComment(id: String!): IdeleteResponse!
  deleteCourse(id: String!): Boolean!
  joinClass(data: ClassRoomUpdateInput!, invite: String!, memberId: String!): ClassRoom!
  updateClass(data: ClassRoomUpdateInput!): ClassRoom!
  updateComment(data: CommentUpdateInput!): Comment!
  updateCourse(data: CourseUpdateInput!): Course!
}

type Query {
  getChildComments(id: String!): [Comment!]!
  getClasses: [ClassRoom!]!
  getComments(course: String!, step: String!): [Comment!]!
  getCourses: [Course!]!
  getFilteredClass(invite: String!): ClassRoom!
  getMyClasses: [ClassRoom!]!
  getOneClassRoom(id: String!): ClassRoom!
  getOneComment(id: String!): Comment!
  getOneCourse(id: String!): Course!
  getUser: User
  isJoined(id: String!): Boolean!
}

type RigesterResponse {
  Ok: Boolean!
  accessToken: String!
  message: String!
}

type Steps {
  contentHtml: String!
  contentMd: String!
  next: Float
  prev: Float
  step: Float!
  title: String!
}

input StepsInput {
  contentHtml: String!
  contentMd: String!
  next: Float
  prev: Float
  step: Float!
  title: String!
}

type User {
  _id: ID!
  createdAt: DateTime!
  email: String!
  name: String!
  updatedAt: DateTime!
}

input UserInput {
  email: String!
  name: String!
  password: String!
}

input UserLoginInput {
  email: String!
  password: String!
}
